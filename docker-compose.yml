version: '3.7'

services:
  postgres:
    image: postgres:14
    container_name: postgres-boilerplate
    restart: always
    environment:
      POSTGRES_DB: boilerplate
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: senocak
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./var/logs/postgresql:/var/log/postgresql
    ports:
      - "5432:5432"
    healthcheck:
      test: "pg_isready -U postgres"
    networks:
      - boilerplate
  redis:
    image: redis:7.0.5-alpine
    container_name: redis-boilerplate
    restart: always
    command: redis-server --save 20 1 --loglevel warning --requirepass senocak
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - boilerplate
  rabbitmq:
    image: rabbitmq:3.6-management-alpine
    container_name: rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: anil
      RABBITMQ_DEFAULT_PASS: "senocak"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - boilerplate
  zookeeper:
    image: confluentinc/cp-zookeeper:6.1.9
    platform: linux/x86_64
    ports:
      - "2181:2181"
    container_name: zookeeper
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
    networks:
      - boilerplate
  kafka:
    image: confluentinc/cp-kafka:6.1.9
    platform: linux/x86_64
    ports:
      - '9092:9092'
    expose:
      - '29092'
    container_name: kafka
    environment:
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
      KAFKA_MIN_INSYNC_REPLICAS: '1'
    restart: unless-stopped
    depends_on:
      - zookeeper
    networks:
      - boilerplate
  connect:
    image: debezium/connect:2.4.0.Final
    ports:
      - "8083:8083"
      - "8778:8778"
    links:
      - kafka
      - postgres
    environment:
      - BOOTSTRAP_SERVERS=kafka:29092
      - GROUP_ID=debezium-events
      - CONFIG_STORAGE_TOPIC=debezium_configs
      - OFFSET_STORAGE_TOPIC=debezium_offsets
      - STATUS_STORAGE_TOPIC=debezium_statuses
    networks:
      - boilerplate
  backend:
    build:
      context: ./spring-kotlin17/auth
      dockerfile: Dockerfile
    container_name: boilerplate-spring-kotlin
    ports:
      - "8080:8080"
    restart: no
    environment:
      SERVER_PORT: 8080
      SERVER_IP: postgres
      POSTGRESQL_PORT: 5432
      POSTGRESQL_DB: boilerplate
      POSTGRESQL_SCHEMA: public
      POSTGRESQL_USER: postgres
      POSTGRESQL_PASSWORD: senocak

      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: senocak
      REDIS_TIMEOUT: 300

      MAIL_HOST: smtp.yandex.com.tr
      MAIL_PROTOCOL: smtp
      MAIL_USERNAME: notification@cosmosboard.com
      MAIL_PASSWORD: xsqgbadvvwxasyoq

      APP_FRONTEND_URL: http://localhost:3232

    networks:
      - boilerplate
    depends_on:
      - postgres
      - redis
  frontend:
    build:
      context: ./react-ts
      dockerfile: Dockerfile
    container_name: boilerplate-react-typescript
    ports:
      - "3232:3232"
    depends_on:
      - backend
    networks:
      - boilerplate
networks:
  boilerplate:
volumes:
  db-data:
  redis-data: